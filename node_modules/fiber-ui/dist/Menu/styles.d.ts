/// <reference types="react" />
export declare const MenuWrapper: import("styled-components").StyledComponent<"ul", any, import("../utils").MergeElementProps<"ul", {
    inline?: boolean | undefined;
    children?: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>[] | undefined;
    collapse?: (() => void) | undefined;
    style?: (import("react").CSSProperties & object) | undefined;
}>, never>;
export declare const StyledItem: import("styled-components").StyledComponent<"li", any, import("../utils").MergeElementProps<"li", {
    danger?: boolean | undefined;
    onClick?: ((event: import("react").MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;
    collapse?: (() => void) | undefined;
    disabled?: boolean | undefined;
    inline?: boolean | undefined;
    style?: (import("react").CSSProperties & object) | undefined;
}>, never>;
