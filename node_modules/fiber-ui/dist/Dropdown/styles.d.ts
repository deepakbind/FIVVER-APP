/// <reference types="react" />
import { CollapseProps } from '../styles';
import { DropdownProps } from './Dropdown';
interface DropdownStyleProps extends CollapseProps, DropdownProps {
}
export declare const Wrapper: import("styled-components").StyledComponent<"div", any, import("../utils").MergeElementProps<"div", {
    trigger?: "hover" | "click" | undefined;
    visible?: boolean | undefined;
    placement?: "left" | "right" | "top" | "bottom" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | "rightTop" | "rightBottom" | "leftTop" | "leftBottom" | undefined;
    onVisibleChange?: ((flag: boolean) => void) | undefined;
    children?: string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal | import("react").ReactNode[] | null | undefined;
    expand?: boolean | undefined;
    inline?: boolean | undefined;
    style?: (import("react").CSSProperties & object) | undefined;
}>, never>;
export declare const DropdownWrapper: import("styled-components").StyledComponent<"div", any, CollapseProps & DropdownStyleProps, never>;
export declare const Description: import("styled-components").StyledComponent<"div", any, {}, never>;
export {};
